#!/bin/sh
#
# CCDEPS-GCC (C) 2002 Emile van Bergen. Distribution of this file is allowed
# under the conditions detailed in the GNU General Public License (GPL). See 
# the file COPYING for more information.
#
# This script compiles and/or links one or more source or object files into a
# object file or executable target, and outputs all extra dependencies found
# while doing so in a file named target.d, which can be used by GNU Make.
#
# The script should be invoked the same way as your C compiler, that is,
# specifying the target using a -o option and the source or object files as 
# non-option arguments. It will generate dependencies in the form
#
# target target.d: dir/file1.c dir/file2.c header1.h header2.h
# dir/file1.c dir/file2.c header1.h header2.h:
#
# This version is intended for GCC, which can do compilation and dependency
# generation in one step. The name of the GCC version (default gcc) can be
# overridden using the CC environment variable.
#
# CHANGELOG
#
# 2014/2/25: ML: Add the ability to disable distcc by settingg an environment
# variable NO_DISTCC
# 2014/1/9: ML: Revised the code to utilize distcc in conjunction with
# clang++ (although the compiler of choice can be changed by modifying
# the value of CXX variable below.  Not the best long-term solution
# (will need to be fixed)
#
# 2014/1/7: ML: Revised the code to be suitable for c++, rather than c
#
# 2003/1/8: EvB: adapted for gcc 3.2, still handles 2.95 as well.
#
#   This was necessary because gcc 3.2 handles -MD differently than gcc 2.95:
#   where the old version generated a .d file for each source, in the current
#   directory, the new one does almost completely what this script intended to
#   do: generate one .d file in the same directory and with the same file name
#   as the target.
#
#   The only fixups 3.2's .d files still need are:
#
#   - changing the file name; gcc 3.2 strips the suffix of the target before 
#     appending the .d, so targets x and x.o will both produce x.d, which is
#     not what we want;
#
#   - adding the implicit dependencies as prerequisiteless targets, so that
#     make will just consider the target out of date if one does not exist
#     anymore; 
#
#   - adding the .d file as depending on the same prerequisites as our real
#     target so that it will be considered out of date if one of the files
#     mentioned in it are updated or missing.
#
#   Basically, this version does all that by simply including the file
#   <strippedtarget>.d file in the list of .d files we look for. We may end
#   up generating the same file name, but that already was handled correctly.
#   Otherwise we perform the normal routine, so that we /know/ the targets will
#   be correct, directories and all, regardless of variations in gcc behaviour.

cmdline="$*"

#CXX=clang++

while [ x"$1" != x ]
do
	case "$1" in
		-o) tgt="$2" ; shift ;;	# target specifier option
		-x|-u|-b|-V) shift ;;	# options with arg after space
		-*) ;;			# standard options
		*) fil="$fil $1" ;;	# source or object files
	esac
	shift
done

if [ x"$CXX" = x ]
then
	CXX=icpc
	export CXX
fi

# If we're not processing any .c files (link only), run gcc as-is and we're done

if [ x"$NO_DISTCC" = "x" ]
then
    DISTCC=distcc
else
    DISTCC=""
fi

#export CCACHE_PREFIX="$DISTCC"
CCACHE='/usr/bin/ccache'
#CXX='/opt/intel/bin/icpc'
CXX='/usr/bin/clang++'
#PWD='/home/shmuel/src/fx/src/'

#if [ [ x"$CXX" = xclang++ ] && [ x"$CCACHE" = "x/usr/bin/ccache" ] ];
#then
    CFLAGS="-Qunused-arguments -fcolor-diagnostics" $CFLAGS
#fi

#expr "$fil" : ".*\.c" >/dev/null || exec $CXX $cmdline
#expr "$fil" : ".*\.c" >/dev/null || exec $DISTCC $CXX $cmdline
echo expr "$fil" : ".*\.c" >/dev/null || exec $CCACHE $CXX $cmdline
expr "$fil" : ".*\.c" >/dev/null || exec $CCACHE $CXX $cmdline
#expr "$fil" : ".*\.c" >/dev/null || exec ccache distcc $CXX $cmdline

# Otherwise, run the gcc with the -MD option, which generates a .d file
# in the current directory for each .c or .cc source file processed.
#
# These files are post-processed (replacing the incorrectly named target
# with the real target specified with -o, and adding the .d file), concatenated
# into one .d file that is named based on the target name, and put in the
# correct directory. Further, all prerequisites are added as bare targets,
# preventing errors when files are missing due to renaming or restructuring
# headers, but causing the files dependent on them to be considered out of
# date. (GNU Make feature).
#
# Makefiles must include the .d files like this: -include $(OBJS_$(d):.o=.d)
# or, when compiling and linking in one step: -include $(TGTS_$(d):%=%.d)

dep=$tgt.d
rm -f $dep


#$CXX -MD -E $cmdline
echo $CCACHE $CXX -MD -E $cmdline
$CCACHE $CXX -MD -MF$dep -E $cmdline
res=$?

dgcc3=`echo $tgt | sed -e 's/\.[^.]*$//'`.d
dgcc=`echo $fil | sed -e 's/[^ 	]*\.[^c]//' -e 's/\.c/\.d/g' -e 's%.*/%%g'`

for tf in $dgcc3 $dgcc
do
	if [ -f $tf ] && mv $tf $dep.tmp
	then
		sed -e "s%.*:%$tgt $dep:%" < $dep.tmp >> $dep
		sed -e 's%^.*:%%' -e 's%^ *%%' -e 's% *\\$%%' -e 's%$%:%' \
			< $dep.tmp >> $dep
		rm -f $dep.tmp
		found=1
	fi
done

#$DISTCC $CXX $cmdline
echo $CCACHE $CXX $cmdline
$CCACHE $CXX $cmdline

[ x"$found" = x"1" ] && exit $res

echo ERROR: $0: Cannot find any compiler-generated dependency files\!
exit 1

